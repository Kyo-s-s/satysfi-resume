@require: gr
@require: list
@require: color
@require: math
@require: stdja
@require: enumitem/enumitem
@require: azmath/azmath

module Resume: sig
  val document: 'a -> block-text -> document
  direct +date: [
    int;
    int;
    int;
  ] block-cmd
  direct +name: [
    inline-text;
    inline-text;
  ] block-cmd
  direct +name-ruby: [
    inline-text;
    inline-text;
  ] block-cmd
  direct +birthday: [
    int;
    int;
    int;
    int;
  ] block-cmd
  direct +address1: [
    inline-text;
    inline-text;
    inline-text;
    inline-text;
    string;
  ] block-cmd
  direct +address2: [
    inline-text;
    inline-text;
    inline-text;
    inline-text;
    string;
  ] block-cmd
  direct +education-history: [
    inline-text;
    inline-text;
    inline-text;
  ] block-cmd
  direct +career-history: [
    inline-text;
    inline-text;
    inline-text;
  ] block-cmd
  direct +qualification-history: [
    inline-text;
    inline-text;
    inline-text;
  ] block-cmd
  direct +self-motivation: [
    (context -> context)?;
    block-text;
  ] block-cmd
  direct +self-pr: [
    (context -> context)?;
    block-text;
  ] block-cmd
  direct +self-desired: [
    (context -> context)?;
    block-text;
  ] block-cmd
  direct +sex: [inline-text] block-cmd
end = struct
  let padding-outer = 50pt
  let padding-inner = 30pt
  let padding-top = 55pt
  let gap = 12pt
  let thick = 1pt
  let font-size-sm = 8pt
  let font-size-md = 11pt
  let font-size-lg = 12pt
  let font-size-xl = 14pt
  let font-size-xxl = 20pt

  % B5 size
  let width = 182mm
  let height = 257mm

  %
  let draw-line = stroke 1pt Color.black
  let draw-dash-line = dashed-stroke 0.5pt (1pt, 1pt, 1pt) Color.black
  let inline-sm ctx = read-inline (set-font-size font-size-sm ctx)
  let inline-md ctx = read-inline (set-font-size font-size-md ctx)
  let inline-lg ctx = read-inline (set-font-size font-size-lg ctx)
  let inline-xl ctx = read-inline (set-font-size font-size-xl ctx)
  let inline-xxl ctx = read-inline (set-font-size font-size-xxl ctx)

  let-mutable date <-
    (|
      year = 2024;
      month = 3;
      day = 24;
    |)

  let-block ctx +date year month day =
    let () =
      date <- (|
        year = year;
        month = month;
        day = day;
      |) in block-nil

  let-mutable name <-
    (|
      last = {};
      first = {};
      last-ruby = {};
      first-ruby = {};
    |)

  let-block ctx +name last first =
    let base = !name in
    let () =
      name <- (|
        base with last = last;
        first = first;
      |) in block-nil
  let-block ctx +name-ruby last first =
    let base = !name in
    let () =
      name <- (|
        base with last-ruby = last;
        first-ruby = first;
      |) in block-nil

  let name-box-width = 300pt
  let name-box-height = 55pt

  % TODO: 名前のセンタリング
  let name-box ctx x y =
    let name = !name in
    let (wid, hgt) = (name-box-width, name-box-height) in
    let la = 70pt in
    let fi = 150pt in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid, y -' hgt));
        draw-text (x +' 5pt, y -' font-size-sm -' 2pt) (inline-sm ctx { ふりがな });
        draw-text (x +' la, y -' font-size-sm -' 2pt) (inline-sm ctx name#last-ruby);
        draw-text (x +' fi, y -' font-size-sm -' 2pt) (inline-sm ctx name#first-ruby);
        draw-dash-line (Gr.line (x, y -' font-size-sm -' 6pt) (x +' wid, y -' font-size-sm -' 6pt));
        draw-text (x +' 5pt, y -' font-size-sm *' 2. -' 8pt) (inline-sm ctx { 氏 名 });
        draw-text (x +' la, y -' font-size-sm -' font-size-xxl -' 14pt) (inline-xxl ctx name#last);
        draw-text (x +' fi, y -' font-size-sm -' font-size-xxl -' 14pt) (inline-xxl ctx name#first);
      ]

  let-mutable birthday <-
    (|
      year = 2003;
      month = 1;
      day = 1;
      age = 21;
    |)

  let-block ctx +birthday year month day age =
    let () =
      birthday <- (|
        year = year;
        month = month;
        day = day;
        age = age;
      |) in block-nil

  let-mutable sex <- {}

  let-block ctx +sex it =
    let () = sex <- it in block-nil

  let birthday-sex-box-width = name-box-width
  let birthday-sex-box-height = 30pt

  let birthday-sex-box ctx x y =
    let (wid, hgt) = (birthday-sex-box-width, birthday-sex-box-height) in
    let birthday = !birthday in
    let sex = !sex in
    let sex-wid = 40pt in
    let birth =
      let int-to-inline x = embed-string (arabic x) in
      let read = inline-lg ctx in
      let year = (read (int-to-inline birthday#year)) ++ (read { 年 }) in
      let month = (read (int-to-inline birthday#month)) ++ (read { 月 }) in
      let day = (read (int-to-inline birthday#day)) ++ (read { 日 }) in
      let age = (read (int-to-inline birthday#age)) ++ (read { 歳 }) in year ++ month ++ day ++ (read { 生 }) ++ (read { (満 }) ++ age ++ (read { ) }) in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid, y -' hgt));
        draw-text (x +' (wid -' sex-wid) *' 0.5 -' (get-natural-width birth) *' 0.5, y -' font-size-lg -' 8pt) birth;
        draw-line (Gr.rectangle (x +' wid -' sex-wid, y) (x +' wid, y -' hgt));
        draw-text (x +' wid -' sex-wid +' 2pt, y -' font-size-sm -' 2pt) (inline-sm ctx { 性別 });
        draw-text (x +' wid -' sex-wid +' 20pt, y -' font-size-md -' 8pt) (inline-md ctx sex);
      ]

  let-mutable address1 <-
    (|
      postal-code = {};
      address = {};
      address-ruby = {};
      phone-number = {};
      email = ` `;
    |)
  let-mutable address2 <-
    (|
      postal-code = {};
      address = { 同上 };
      address-ruby = {};
      phone-number = {};
      email = ` `;
    |)

  let-block ctx +address1 postal-code address address-ruby phone-number email =
    let () =
      address1 <- (|
        postal-code = postal-code;
        address = address;
        address-ruby = address-ruby;
        phone-number = phone-number;
        email = email;
      |) in block-nil
  let-block ctx +address2 postal-code address address-ruby phone-number email =
    let () =
      address2 <- (|
        postal-code = postal-code;
        address = address;
        address-ruby = address-ruby;
        phone-number = phone-number;
        email = email;
      |) in block-nil

  let address-box-width = width -' padding-outer -' padding-inner
  let address-box-height = 65pt
  let address-box-phone-width = 100pt

  let url link it =
    let hook = hook-page-break (fun _ pos -> (let (w, h, d) = get-natural-metrics it in register-link-to-uri link pos w h d None)) in hook ++ it

  let address-box ctx x y address =
    let (wid, hgt) = (address-box-width, address-box-height) in
    let sx = 45pt in
    let address = !address in
    let postal-code = (inline-sm ctx { 〒 }) ++ (inline-md ctx address#postal-code) in
    let phone-number = (inline-lg ctx address#phone-number) in
    let email =
      let email = inline-sm ctx (embed-string address#email) in
      let link = `mailto:` ^ address#email in url link email in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid -' address-box-phone-width, y -' hgt));
        draw-line (Gr.rectangle (x +' wid -' address-box-phone-width, y) (x +' wid, y -' hgt));
        draw-line (Gr.line (x +' wid -' address-box-phone-width, y -' address-box-height *' 0.5) (x +' wid, y -' address-box-height *' 0.5));
        draw-dash-line (Gr.line (x, y -' font-size-sm -' 6pt) (x +' wid -' address-box-phone-width, y -' font-size-sm -' 6pt));
        draw-text (x +' 5pt, y -' font-size-sm -' 2pt) (inline-sm ctx { ふりがな });
        draw-text (x +' sx, y -' font-size-sm -' 2pt) (inline-sm ctx address#address-ruby);
        draw-text (x +' sx, y -' font-size-sm -' font-size-md -' 8pt) postal-code;
        draw-text (x +' sx, y -' font-size-sm -' font-size-md -' font-size-xl -' 18pt) (inline-xl ctx address#address);
        draw-text (x +' wid -' address-box-phone-width +' 4pt, y -' font-size-sm -' 2pt) (inline-sm ctx { 電話 });
        draw-text (x +' wid -' address-box-phone-width *' 0.5 -' (get-natural-width phone-number) *' 0.5, y -' font-size-sm -' font-size-lg -' 6pt) phone-number;
        draw-text (x +' wid -' address-box-phone-width +' 4pt, y -' font-size-sm -' 34pt) (inline-sm ctx { メールアドレス });
        draw-text (x +' wid -' address-box-phone-width *' 0.5 -' (get-natural-width email) *' 0.5, y -' font-size-sm -' font-size-lg -' 36pt) email;
      ]

  let address1-box ctx x y =
    List.append (address-box ctx x y address1) [
      draw-text (x +' 5pt, y -' font-size-sm *' 2. -' 8pt) (inline-sm ctx { 現住所 });
    ]

  let address2-box ctx x y =
    let warn = inline-sm ctx { (現住所以外に連絡する場合のみ記入) } in
      List.append (address-box ctx x y address2) [
        draw-text (x +' 5pt, y -' font-size-sm *' 2. -' 8pt) (inline-sm ctx { 連絡先 });
        draw-text (x +' address-box-width -' address-box-phone-width -' 5pt -' (get-natural-width warn), y -' font-size-sm *' 2. -' 8pt) warn;
      ]

  % init で全体のmutable list に入れる
  % その後，いい感じに走査...？
  let-mutable education-history <- []

  let-block ctx +education-history year month data =
    let add =
      (|
        year = year;
        month = month;
        data = data;
      |) in
    let () = education-history <- List.append !education-history [add;] in block-nil

  let-mutable career-history <- []

  let-block ctx +career-history year month data =
    let add =
      (|
        year = year;
        month = month;
        data = data;
      |) in
    let () = career-history <- List.append !career-history [add;] in block-nil

  let-mutable qualification-history <- []

  let-block ctx +qualification-history year month data =
    let add =
      (|
        year = year;
        month = month;
        data = data;
      |) in
    let () = qualification-history <- List.append !qualification-history [add;] in block-nil

  let history-box-width = width -' padding-outer -' padding-inner

  type align =  | Left | Center | Right

  let education-and-career-history-count = 16
  let qualification-history-count = 6
  let year-width = 50pt
  let month-width = 30pt
  let history-height = 22pt

  let history-fin =
    ((|
      year = {};
      month = {};
      data = { 以上 };
    |), Right)

  let education-and-career-list education-history career-history =
    let education =
      if List.length education-history == 0
      then
        []
      else
        List.concat [
          [
            ((|
              year = {};
              month = {};
              data = { 学歴 };
            |), Center);
          ];
          List.map (fun data -> (data, Left)) education-history;
          [
            ((|
              year = {};
              month = {};
              data = {};
            |), Center);
          ];
        ] in
    let career =
      if List.length career-history == 0
      then
        []
      else
        List.concat [
          [
            ((|
              year = {};
              month = {};
              data = { 職歴 };
            |), Center);
          ];
          List.map (fun data -> (data, Left)) career-history;
        ] in
      List.concat [
        education;
        career;
        [
          ((|
            year = {};
            month = {};
            data = { 現在に至る };
          |), Left);
          ((|
            year = {};
            month = {};
            data = { 以上 };
          |), Right);
        ];
      ]

  let history-box ctx x y kind cnt write =
    % title
    let cnt = cnt + 1 in
    let wid = history-box-width in
    let h = history-height in
    let hgt = h *' (float cnt) in
    let-mutable index <- 0 in
    let education-and-career-write data align =
      let year-gr =
        let year = inline-lg ctx data#year in
        let x = x +' year-width *' 0.5 -' (get-natural-width year) *' 0.5 in
        let y = y -' h *' (float !index) -' font-size-md -' 5pt in draw-text (x, y) year in
      let month-gr =
        let month = inline-lg ctx data#month in
        let x = x +' year-width +' month-width *' 0.5 -' (get-natural-width month) *' 0.5 in
        let y = y -' h *' (float !index) -' font-size-md -' 5pt in
        let month = inline-lg ctx data#month in draw-text (x, y) month in
      let data-gr =
        let data = inline-lg ctx data#data in
        let x =
          match align with
            | Left -> x +' year-width +' month-width +' 5pt
            | Center -> x +' year-width +' month-width +' (wid -' year-width -' month-width -' get-natural-width data) *' 0.5
            | Right -> x +' wid -' (get-natural-width data) -' 5pt in
        let y = y -' h *' (float !index) -' font-size-md -' 5pt in draw-text (x, y) data in
      let () = index <- !index + 1 in
        [
          year-gr;
          month-gr;
          data-gr;
        ] in
    let-rec lines i = if i == 0
      then
        []
      else
        List.append (lines (i - 1)) [
          draw-line (Gr.line (x, y -' h *' (float i)) (x +' wid, y -' h *' (float i)));
        ] in
      List.concat [
        [
          draw-line (Gr.rectangle (x, y) (x +' wid, y -' hgt));
          draw-line (Gr.line (x +' year-width, y) (x +' year-width, y -' hgt));
          draw-line (Gr.line (x +' year-width +' month-width, y) (x +' year-width +' month-width, y -' hgt));
        ];
        lines cnt;
        education-and-career-write (|
          year = { 年 };
          month = { 月 };
          data = kind;
        |) Center;
        List.concat (List.map (fun (data, align) -> education-and-career-write data align) write);
      ]

  let page1 ctx =
    let base-gr =
      let date =
        let date = !date in
        let year = (inline-md ctx (embed-string (arabic date#year))) ++ (inline-md ctx { 年 }) in
        let month = inline-md ctx (embed-string (arabic date#month)) ++ (inline-md ctx { 月 }) in
        let day = inline-md ctx (embed-string (arabic date#day)) ++ (inline-md ctx { 日 }) in year ++ month ++ day ++ (inline-md ctx { 現在 }) in
        [
          draw-text (padding-outer, height -' padding-top -' 20pt) (read-inline (ctx
            |> set-font-size 20pt) { 履 歴 書 });
          draw-text (padding-outer +' name-box-width -' (get-natural-width date), height -' padding-top -' 20pt) date;
        ] in
    let name-box-y = height -' padding-top -' 10pt -' 20pt in
    let birthday-sex-box-y = name-box-y -' name-box-height in
    let address1-box-y = birthday-sex-box-y -' birthday-sex-box-height in
    let address2-box-y = address1-box-y -' address-box-height in
    let education-and-career-history-box-y = address2-box-y -' address-box-height -' gap in
      line-break true true ctx (inline-graphics width height 0pt (fun _ -> (List.concat [
        base-gr;
        name-box ctx padding-outer name-box-y;
        birthday-sex-box ctx padding-outer birthday-sex-box-y;
        address1-box ctx padding-outer address1-box-y;
        address2-box ctx padding-outer address2-box-y;
        history-box ctx padding-outer education-and-career-history-box-y { 学歴・職歴 } education-and-career-history-count (education-and-career-list !education-history !career-history);
      ])))

  let free-box ctx x y hgt title it =
    let wid = width -' padding-outer -' padding-inner in
    let it = embed-block-breakable ctx it in
    let (_, h, _) = get-natural-metrics it in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid, y -' hgt));
        draw-line (Gr.line (x, y -' history-height) (x +' wid, y -' history-height));
        draw-text (x +' 5pt, y -' font-size-md -' 4pt) (inline-md ctx title);
        draw-text (x +' 5pt, y -' history-height -' h -' 5pt) it;
      ]

  let-mutable self-motivation <- block-nil

  let-block ctx +self-motivation ?:f it =
    let ctx =
      match f with
        | None -> ctx
          |> set-font-size font-size-md
        | Some f -> f ctx in
    let () = self-motivation <- (read-block ctx it) in block-nil

  let-mutable self-pr <- block-nil

  let-block ctx +self-pr ?:f it =
    let ctx =
      match f with
        | None -> ctx
          |> set-font-size font-size-md
        | Some f -> f ctx in
    let () = self-pr <- (read-block ctx it) in block-nil

  let-mutable self-desired <- block-nil

  let-block ctx +self-desired ?: f it =
    let ctx =
      match f with
        | None -> ctx
          |> set-font-size font-size-md
        | Some f -> f ctx in
    let () = self-desired <- (read-block ctx it) in block-nil

  let page2 ctx =
    let self-motivation-box-height = 170pt in
    let self-pr-box-height = 160pt in
    let self-desired-box-height = 111pt in
    let qualification-history-box-y = height -' padding-top in
    let self-motivation-box-y = qualification-history-box-y -' history-height *' (float (qualification-history-count + 1)) -' gap in
    let self-pr-box-y = self-motivation-box-y -' self-motivation-box-height -' gap in
    let qualification-list = List.append (List.map (fun data -> (data, Left)) !qualification-history) [history-fin;] in
    let self-desired-box-y = self-pr-box-y -' self-pr-box-height -' gap in
      line-break true true ctx (inline-graphics 182mm 257mm 0pt (fun _ -> List.concat [
        history-box ctx padding-inner qualification-history-box-y { 免許・資格 } qualification-history-count qualification-list;
        free-box ctx padding-inner self-motivation-box-y self-motivation-box-height { 志望動機 } !self-motivation;
        free-box ctx padding-inner self-pr-box-y self-pr-box-height { 趣味，特技，アピールポイントなど } !self-pr;
        free-box ctx padding-inner self-desired-box-y self-desired-box-height { 本人希望記入欄 (特に給料・職種・勤務時間・勤務地・その他についての希望などがあれば記入) } !self-desired;
      ]))

  let document record inner =
    let ctx =
      get-initial-context (width -' padding-outer -' padding-inner -' 10pt) (command \math)
        |> set-dominant-narrow-script Latin
        |> set-dominant-wide-script Kana
        |> set-paragraph-margin 2pt 2pt in
    let _ = read-block ctx inner in
    let bb = (page1 ctx) +++ (page2 ctx) in
      page-break (UserDefinedPaper(width, height)) (fun _ -> (|
        text-origin = (80pt, 100pt);
        text-height = 630pt;
      |)) (fun _ -> (|
        header-origin = (0pt, 0pt);
        header-content = block-nil;
        footer-origin = (0pt, 0pt);
        footer-content = block-nil;
      |)) bb
end
in

Resume.document (||) '<
  +date (2024) (3) (30);
  +name ({ 芝浦 }) ({ 太郎 });
  +name-ruby ({ しばうら }) ({ たろう });

  +birthday (2003) (1) (1) (21);
  +sex ({ 男 });

  +address1 ({ 123-4567 }) ({ 東京都港区芝浦1-2-3 }) ({ とうきょうとみなとくしばうら1-2-3 }) ({ 090-1234-5678 }) (`hogehogehogehoge@gmail.com`);
  % +address2 ({ 123-4567 }) ({ 東京都港区芝浦1-2-3 }) ({ とうきょうとみなとくしばうら1-2-3 }) ({ 090-1234-5678 }) (`https://chat.openai.com/c/c68135cf-ea60-4c56-b472-90bcc0132409`);
  +education-history ({ 2018 }) ({ 4 }) ({ 東京都立芝浦高等学校 入学 });
  +education-history ({ 2021 }) ({ 3 }) ({ 東京都立芝浦高等学校 卒業 });
  +education-history ({ 2021 }) ({ 4 }) ({ 芝浦工業大学 システム工学部 入学 });

  +career-history ({ 2021 }) ({ 4 }) ({ 株式会社芝浦工業 インターンシップ });

  +qualification-history ({ 2021 }) ({ 5 }) ({ AtCoder 入茶 });
  +qualification-history ({ 2021 }) ({ 7 }) ({ AtCoder 入緑 });
  +qualification-history ({ 2021 }) ({ 10 }) ({ AtCoder 入水 });
  +qualification-history ({ 2022 }) ({ 4 }) ({ AtCoder 入青 });

  +self-motivation <
    +p { お気持ち }
  >

  +self-pr <
    +p {
      志望の動機とか自己PR
      ほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげ
      ほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげほげ
    }
  >

  +self-desired ?:(fun ctx -> ctx
    |> set-font-size 30pt
    |> set-text-color Color.red) <
    +pn { 5000兆円欲しい！！ }
  >
>
