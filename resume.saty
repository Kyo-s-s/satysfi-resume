@require: gr
@require: list
@require: color
@require: math

module Resume: sig
  val document: 'a -> block-text -> document
  direct +name: [
    inline-text;
    inline-text;
  ] block-cmd
  direct +name-ruby: [
    inline-text;
    inline-text;
  ] block-cmd
  direct +birthday: [
    int;
    int;
    int;
    int;
  ] block-cmd
  direct +address1: [
    inline-text;
    inline-text;
    inline-text;
    inline-text;
  ] block-cmd
  direct +address2: [
    inline-text;
    inline-text;
    inline-text;
    inline-text;
  ] block-cmd
  direct +sex: [inline-text] block-cmd
end = struct
  let padding-outer = 50pt
  let padding-inner = 30pt
  let padding-top = 50pt
  let thick = 1pt
  let font-size-sm = 8pt
  let font-size-md = 10pt
  let font-size-lg = 12pt
  let font-size-xl = 14pt
  let font-size-xxl = 18pt

  % B5 size
  let width = 182mm
  let height = 257mm

  %
  let draw-line = stroke 1pt Color.black
  let draw-dash-line = dashed-stroke 0.5pt (1pt, 1pt, 1pt) Color.black
  let inline-sm ctx = read-inline (set-font-size font-size-sm ctx)
  let inline-md ctx = read-inline (set-font-size font-size-md ctx)
  let inline-lg ctx = read-inline (set-font-size font-size-lg ctx)
  let inline-xl ctx = read-inline (set-font-size font-size-xl ctx)
  let inline-xxl ctx = read-inline (set-font-size font-size-xxl ctx)

  let-mutable name <-
    (|
      last = {};
      first = {};
      last-ruby = {};
      first-ruby = {};
    |)

  let-block ctx +name last first =
    let base = !name in
    let () =
      name <- (|
        base with last = last;
        first = first;
      |) in block-nil
  let-block ctx +name-ruby last first =
    let base = !name in
    let () =
      name <- (|
        base with last-ruby = last;
        first-ruby = first;
      |) in block-nil

  let name-box-width = 300pt
  let name-box-height = 45pt

  % TODO: 名前のセンタリング
  let name-box ctx x y =
    let name = !name in
    let (wid, hgt) = (name-box-width, name-box-height) in
    let la = 70pt in
    let fi = 150pt in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid, y -' hgt));
        draw-text (x +' 5pt, y -' font-size-sm -' 2pt) (inline-sm ctx { ふりがな });
        draw-text (x +' la, y -' font-size-sm -' 2pt) (inline-sm ctx name#last-ruby);
        draw-text (x +' fi, y -' font-size-sm -' 2pt) (inline-sm ctx name#first-ruby);
        draw-dash-line (Gr.line (x, y -' font-size-sm -' 6pt) (x +' wid, y -' font-size-sm -' 6pt));
        draw-text (x +' 5pt, y -' font-size-sm *' 2. -' 8pt) (inline-sm ctx { 氏 名 });
        draw-text (x +' la, y -' font-size-sm -' font-size-xxl -' 10pt) (inline-xxl ctx name#last);
        draw-text (x +' fi, y -' font-size-sm -' font-size-xxl -' 10pt) (inline-xxl ctx name#first);
      ]

  let-mutable birthday <-
    (|
      year = 2003;
      month = 1;
      day = 1;
      age = 21;
    |)

  let-block ctx +birthday year month day age =
    let () =
      birthday <- (|
        year = year;
        month = month;
        day = day;
        age = age;
      |) in block-nil

  let-mutable sex <- {}

  let-block ctx +sex it =
    let () = sex <- it in block-nil

  let birthday-sex-box-width = name-box-width
  let birthday-sex-box-height = 25pt

  let birthday-sex-box ctx x y =
    let (wid, hgt) = (birthday-sex-box-width, birthday-sex-box-height) in
    let birthday = !birthday in
    let sex = !sex in
    let sex-wid = 40pt in
    let birth =
      let int-to-inline x = embed-string (arabic x) in
      let read = inline-md ctx in
      let year = (read (int-to-inline birthday#year)) ++ (read { 年 }) in
      let month = (read (int-to-inline birthday#month)) ++ (read { 月 }) in
      let day = (read (int-to-inline birthday#day)) ++ (read { 日 }) in
      let age = (read (int-to-inline birthday#age)) ++ (read { 歳 }) in year ++ month ++ day ++ (read { 生 }) ++ (read { (満 }) ++ age ++ (read { ) }) in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid, y -' hgt));
        draw-text (x +' (wid -' sex-wid) *' 0.5 -' (get-natural-width birth) *' 0.5, y -' font-size-md -' 6pt) birth;
        draw-line (Gr.rectangle (x +' wid -' sex-wid, y) (x +' wid, y -' hgt));
        draw-text (x +' wid -' sex-wid +' 2pt, y -' font-size-sm -' 2pt) (inline-sm ctx { 性別 });
        draw-text (x +' wid -' sex-wid +' 20pt, y -' font-size-md -' 8pt) (inline-md ctx sex);
      ]

  let-mutable address1 <-
    (|
      postal-code = {};
      address = {};
      address-ruby = {};
      phone-number = {};
    |)
  let-mutable address2 <-
    (|
      postal-code = {};
      address = {};
      address-ruby = {};
      phone-number = {};
    |)

  let-block ctx +address1 postal-code address address-ruby phone-number =
    let () =
      address1 <- (|
        postal-code = postal-code;
        address = address;
        address-ruby = address-ruby;
        phone-number = phone-number;
      |) in block-nil
  let-block ctx +address2 postal-code address address-ruby phone-number =
    let () =
      address2 <- (|
        postal-code = postal-code;
        address = address;
        address-ruby = address-ruby;
        phone-number = phone-number;
      |) in block-nil

  let address-box-width = width -' padding-outer -' padding-inner
  let address-box-height = 55pt
  let address-box-phone-width = 80pt

  let address-box ctx x y address =
    let (wid, hgt) = (address-box-width, address-box-height) in
    let sx = 45pt in
    let address = !address in
    let postal-code = (inline-sm ctx { 〒 }) ++ (inline-md ctx address#postal-code) in
    let phone-number = (inline-lg ctx address#phone-number) in
      [
        draw-line (Gr.rectangle (x, y) (x +' wid -' address-box-phone-width, y -' hgt));
        draw-line (Gr.rectangle (x +' wid -' address-box-phone-width, y) (x +' wid, y -' hgt));
        draw-dash-line (Gr.line (x, y -' font-size-sm -' 6pt) (x +' wid -' address-box-phone-width, y -' font-size-sm -' 6pt));
        draw-text (x +' 5pt, y -' font-size-sm -' 2pt) (inline-sm ctx { ふりがな });
        draw-text (x +' sx, y -' font-size-sm -' 2pt) (inline-sm ctx address#address-ruby);
        draw-text (x +' sx, y -' font-size-sm -' font-size-md -' 8pt) postal-code;
        draw-text (x +' sx, y -' font-size-sm -' font-size-md -' font-size-xl -' 14pt) (inline-xl ctx address#address);
        draw-text (x +' wid -' address-box-phone-width +' 4pt, y -' font-size-sm -' 2pt) (inline-sm ctx { 電話 });
        draw-text (x +' wid -' address-box-phone-width *' 0.5 -' (get-natural-width phone-number) *' 0.5, y -' font-size-sm -' font-size-lg -' 14pt) phone-number;
      ]

  let address1-box ctx x y =
    List.append (address-box ctx x y address1) [
      draw-text (x +' 5pt, y -' font-size-sm *' 2. -' 8pt) (inline-sm ctx { 現住所 });
    ]

  let address2-box ctx x y =
    let warn = inline-sm ctx { (現住所以外に連絡する場合のみ記入) } in
      List.append (address-box ctx x y address2) [
        draw-text (x +' 5pt, y -' font-size-sm *' 2. -' 8pt) (inline-sm ctx { 連絡先 });
        draw-text (x +' address-box-width -' address-box-phone-width -' 5pt -' (get-natural-width warn), y -' font-size-sm *' 2. -' 8pt) warn;
      ]

  let page1 ctx =
    let base-gr =
      [
        draw-text (padding-outer, height -' padding-top) (read-inline (ctx
          |> set-font-size 20pt) { 履 歴 書 });
      ] in
    let name-box-y = height -' padding-top -' 10pt in
    let birthday-sex-box-y = name-box-y -' name-box-height in
    let address1-box-y = birthday-sex-box-y -' birthday-sex-box-height in
    let address2-box-y = address1-box-y -' address-box-height in
      line-break true true ctx (inline-graphics width height 0pt (fun _ -> (List.concat [
        base-gr;
        name-box ctx padding-outer name-box-y;
        birthday-sex-box ctx padding-outer birthday-sex-box-y;
        address1-box ctx padding-outer address1-box-y;
        address2-box ctx padding-outer address2-box-y;
      ])))

  let wakudraft =
    [
      stroke 1pt Color.black (Gr.rectangle (30pt, 30pt) (182mm -' 30pt, 257mm -' 30pt));
    ]
  let page2 ctx = line-break true true ctx (inline-graphics 182mm 257mm 0pt (fun _ -> wakudraft))

  let document record inner =
    let ctx =
      get-initial-context 440pt (command \math)
        |> set-dominant-narrow-script Latin
        |> set-dominant-wide-script Kana in
    let _ = read-block ctx inner in
    let bb = (page1 ctx) +++ (page2 ctx) in
      page-break (UserDefinedPaper(width, height)) (fun _ -> (|
        text-origin = (80pt, 100pt);
        text-height = 630pt;
      |)) (fun _ -> (|
        header-origin = (0pt, 0pt);
        header-content = block-nil;
        footer-origin = (0pt, 0pt);
        footer-content = block-nil;
      |)) bb
end
in

Resume.document (||) '<
  +name ({ 芝浦 }) ({ 太郎 });
  +name-ruby ({ しばうら }) ({ たろう });

  +birthday (2003) (1) (1) (21);
  +sex ({ 男 });

  +address1 ({ 123-4567 }) ({ 東京都港区芝浦1-2-3 }) ({ とうきょうとみなとくしばうら1-2-3 }) ({ 090-1234-5678 });
  +address2 ({ 123-4567 }) ({ 東京都港区芝浦1-2-3 }) ({ とうきょうとみなとくしばうら1-2-3 }) ({ 090-1234-5678 });
>
